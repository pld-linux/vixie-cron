diff -uNr vixie-cron-4.1.p22/cron.c vixie-cron-4.1/cron.c
--- vixie-cron-4.1.p22/cron.c	2005-07-23 12:40:30.000000000 +0200
+++ vixie-cron-4.1/cron.c	2005-07-24 23:59:50.000000000 +0200
@@ -110,7 +110,7 @@
 			break;
 		case 0:
 			/* child process */
-			(void) setsid();
+			daemon(1,0);
 			if ((fd = open(_PATH_DEVNULL, O_RDWR, 0)) >= 0) {
 				(void) dup2(fd, STDIN);
 				(void) dup2(fd, STDOUT);
diff -uNr vixie-cron-4.1.p22/database.c vixie-cron-4.1/database.c
--- vixie-cron-4.1.p22/database.c	2005-07-24 23:50:09.000000000 +0200
+++ vixie-cron-4.1/database.c	2005-07-25 00:22:09.000000000 +0200
@@ -28,6 +28,15 @@
 
 #include "cron.h"
 
+#ifdef WITH_SELINUX
+#include <selinux/selinux.h>
+#include <selinux/flask.h>
+#include <selinux/av_permissions.h>
+#define SYSUSERNAME "system_u"
+#else
+#define SYSUSERNAME "*system*"
+#endif
+
 #define TMAX(a,b) ((a)>(b)?(a):(b))
 
 static	void		process_crontab(const char *, const char *,
@@ -121,7 +130,7 @@
 		(void) strcpy(fname, dp->d_name);
 		snprintf(tabname, MAXNAMLEN+1, "/etc/cron.d/%s", fname);
 
-		process_crontab("root", "*system*", tabname,
+		process_crontab("root", SYSUSERNAME, tabname,
 				&crond_stat, &new_db, old_db);
 	}
 	closedir(dir);
@@ -226,7 +235,7 @@
 	if (fname == NULL) {
 		/* must be set to something for logging purposes.
 		 */
-		fname = "*system*";
+		fname = SYSUSERNAME;
 	} else if ((pw = getpwnam(uname)) == NULL) {
 		/* file doesn't have a user in passwd file.
 		 */
@@ -293,6 +302,60 @@
 		free_user(u);
 		log_it(fname, getpid(), "RELOAD", tabname);
 	}
+#ifdef WITH_SELINUX
+	if (is_selinux_enabled()>0)	{
+	  security_context_t  file_context=NULL;
+	  security_context_t   user_context=NULL;
+	  struct av_decision avd;
+	  int retval=0;
+
+	  if (fgetfilecon(crontab_fd, &file_context) < OK) {
+	    if (security_getenforce() > 0) {
+    		log_it(fname, getpid(), "getfilecon FAILED", tabname);
+    		goto next_crontab;
+	    } else {
+		log_it(fname, getpid(), "getfilecon FAILED but SELinux in permissive mode, continuing", tabname);
+		goto selinux_out;
+	    }		
+	  }
+
+	  /*
+	   * Since crontab files are not directly executed,
+	   * crond must ensure that the crontab file has
+	   * a context that is appropriate for the context of
+	   * the user cron job.  It performs an entrypoint
+	   * permission check for this purpose.
+	   */
+	  if (get_default_context(fname, NULL, &user_context)) {
+	    freecon(file_context);
+		if (security_getenforce() > 0) {
+			log_it(fname, getpid(), "NO CONTEXT", tabname);
+			goto next_crontab;
+	    } else {
+			log_it(fname, getpid(), "NO CONTEXT but SELinux in permissive mode, continuing", tabname);
+			goto selinux_out;
+	    }
+	  }
+	  retval = security_compute_av(user_context,
+				       file_context,
+				       SECCLASS_FILE,
+				       FILE__ENTRYPOINT,
+				       &avd);
+	  freecon(user_context);
+	  freecon(file_context);
+	  if (retval || ((FILE__ENTRYPOINT & avd.allowed) != FILE__ENTRYPOINT)) {
+	    if (security_getenforce() > 0) {
+    		log_it(fname, getpid(), "ENTRYPOINT FAILED", tabname);
+    		goto next_crontab;
+	    } else {
+		log_it(fname, getpid(), "ENTRYPOINT FAILED but SELinux in permissive mode, continuing", tabname);
+		goto selinux_out;
+	    }
+	  }
+selinux_out:
+		((void)0);
+	}
+#endif
 	u = load_user(crontab_fd, pw, fname);
 	if (u != NULL) {
 		u->mtime = statbuf->st_mtime;
diff -uNr vixie-cron-4.1.p22/do_command.c vixie-cron-4.1/do_command.c
--- vixie-cron-4.1.p22/do_command.c	2005-07-25 00:07:52.000000000 +0200
+++ vixie-cron-4.1/do_command.c	2005-07-25 00:21:27.000000000 +0200
@@ -23,6 +23,10 @@
 static char rcsid[] = "$Id$";
 #endif
 
+#ifdef WITH_SELINUX
+#include <selinux/selinux.h>
+#endif
+
 #include "cron.h"
 
 #include <security/pam_appl.h>
@@ -295,6 +299,25 @@
 			 */
 			(void) signal(SIGCHLD, SIG_DFL);
 #endif /*USE_SIGCHLD*/
+#ifdef WITH_SELINUX
+			if (is_selinux_enabled()>0) {
+			  security_context_t scontext;
+			  if (get_default_context(u->name, NULL, &scontext)) {
+			    if (security_getenforce() > 0) {
+    				fprintf(stderr, "execle: couldn't get security context for user %s\n", u->name); 
+    				_exit(ERROR_EXIT);
+			    }
+			  } else {
+    			      if (setexeccon(scontext) < 0) {
+				  if (security_getenforce() > 0) {
+				      fprintf(stderr, "Could not set exec context to %s for user  %s\n", scontext,u->name);
+    				      _exit(ERROR_EXIT);
+				  }
+    			      }
+    			      freecon(scontext);
+			  }
+			 }
+#endif /*WITH_SELINUX*/
 			execle(shell, shell, "-c", e->cmd, (char *)0, e->envp);
 			fprintf(stderr, "execl: couldn't exec `%s'\n", shell);
 			perror("execl");
diff -uNr vixie-cron-4.1.p22/Makefile vixie-cron-4.1/Makefile
--- vixie-cron-4.1.p22/Makefile	2005-07-24 23:37:58.000000000 +0200
+++ vixie-cron-4.1/Makefile	2005-07-25 00:00:34.000000000 +0200
@@ -59,7 +59,7 @@
 INCLUDE		=	-I.
 #INCLUDE	=
 #<<need getopt()>>
-LIBS		=	-lpam
+LIBS		=	-lpam -lselinux
 #<<optimize or debug?>>
 CDEBUG		=	$(RPM_OPT_FLAGS)
 #CDEBUG		=	-g
@@ -68,7 +68,7 @@
 #<<want to use a nonstandard CC?>>
 CC		=	gcc -Wall -Wno-unused -Wno-comment
 #<<manifest defines>>
-DEFS		=	
+DEFS		=	-DWITH_SELINUX
 #(SGI IRIX systems need this)
 #DEFS		=	-D_BSD_SIGNALS -Dconst=
 #<<the name of the BSD-like install program>>
